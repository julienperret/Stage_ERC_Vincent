
// departement 
val dept = Val[Int]
//options pass√©es en string
val optionsPrep = Val[String]

val scenario = Val[Double] 
val pluPriority = Val[Double] 
val buildNonRes= Val[Double]
val densifyGround= Val[Double]
val maxBuiltRatio = Val[Double] 
val densifyOld = Val[Double]
val maximumDensity = Val[Double] 
val winSize = Val[Double] 
val minContig = Val[Double]  
val maxContig  = Val[Double] 
val writingTifs = Val[String]
val taux = Val[Double]
val res = Val[Int]

//=========================
val inputDirectory = Val[File]
val output = Val[File]

val impact = Val[Double]


// python task
val pythonTask =
  UDockerTask(workDirectory / "erc3.tar",
  //UDockerTask(DockerImage("juperret/erc"),
"""xvfb-run -a python3 simulate.py /tmp/prepared_data /tmp/results ${taux} ${scenario} ${pluPriority} ${buildNonRes} ${densifyGround} ${maxBuiltRatio} ${densifyOld}  ${maximumDensity} ${winSize} ${minContig} ${maxContig} ${writingTifs}  "${optionsPrep}"""")set (
    inputDirectory := workDirectory / "prepared_34",
    inputs += (taux, scenario, pluPriority, buildNonRes, densifyGround, maxBuiltRatio, densifyOld, maximumDensity, winSize, minContig, maxContig),
    inputs += optionsPrep,
    outputs += (taux, scenario, pluPriority, buildNonRes, densifyGround, maxBuiltRatio, densifyOld, maximumDensity, winSize, minContig, maxContig),
    inputFiles += (inputDirectory, "/tmp/prepared_data"),
    outputFiles += ("/tmp/results", output),
    optionsPrep:="",
    taux := -1.0 ,
    //winSize := 3.0,
    //minContig := 0.333,
    //maxContig :=0.45,
    writingTifs := "False"
    
  )
  
  
val extract = ScalaTask("""
|    import scala.io.Source
|    val measures = output.listFiles().filter(_.isDirectory).flatMap(_.listFiles().filter(_.isDirectory)).flatMap(_.listFiles().filter(_.getName.equalsIgnoreCase("mesures.csv"))).head
|    val src = Source.fromFile(measures)
|    val lineArray = src.getLines().drop(7).next().split(",")
|    val impact = lineArray(1).trim.toDouble
    """.stripMargin) set (
    inputs += output,
    outputs += impact
    )
    
val copy = CopyFileHook(output, workDirectory / "results" / "sim_${taux}_${scenario}_${pluPriority}_${buildNonRes}_${densifyGround}_${maxBuiltRatio}_${densifyOld}_${maximumDensity}_${winSize}_${minContig}_${maxContig}.csv")

val stringHook = DisplayHook("The impact value is ${impact}.")

val env = LocalEnvironment(6)



val runModel = MoleTask( (pythonTask hook copy)  -- (extract hook stringHook))



val profileMBR =
  GenomeProfileEvolution(
    evaluation = runModel ,
    parallelism = 3,
    termination = 2 hours,
    x = maxBuiltRatio,
    nX = 50,
    genome = Seq(
//    taux in List(-1.0),
    scenario in List(0.0,1.0,2.0),
                       pluPriority in (0.0 , 1.0) ,
                        buildNonRes in (0.0 , 1.0),
                        densifyGround in (0.0 , 1.0) ,
                         maxBuiltRatio in  (50.0, 100.0),
                        densifyOld in (0.0 , 1.0) ,
                        maximumDensity in (0.0 , 1.0),
                        winSize in (3.0 , 7.0 ),
                        minContig in (0.0 ,  0.3 ),
                        maxContig in (0.6 ,  1.0 )
    ),

    objective = impact
    )
    


val savePopulationHook = SavePopulationHook(profileMBR, workDirectory / "results"/"profile" )


profileMBR hook savePopulationHook on env

