// departement
val dept = Val[Int]
//options passées en string
val optionsPrep = Val[String]


// tout est passé en double car la methode morris ne prend que ça pour le moment
val taux = Val[Double]
val scenario = Val[Double]
val pluPriority = Val[Double]
val buildNonRes= Val[Double]
val densifyGround= Val[Double]
val maxBuiltRatio = Val[Double]
val densifyOld = Val[Double]
val maximumDensity = Val[Double]
val winSize = Val[Double]
val minContig = Val[Double] 
val maxContig  = Val[Double]
val writingTifs = Val[String]
val seed = Val [Int]
val sirene= Val[Int]
val transport= Val[Int]
val routes= Val[Int]
val ecologie= Val[Int]
val ocsol= Val[Int]
val res = Val[Int]


//=========================
val inputDirectory = Val[File]
val output = Val[File]

val impact = Val[Double]


// python task
val pythonTask =
  UDockerTask(workDirectory / "erc_new.tar",
  //UDockerTask(DockerImage("juperret/erc"),
"""xvfb-run -a python3 simulate.py /tmp/prepared_data /tmp/results ${taux} ${scenario} ${pluPriority} ${buildNonRes} ${densifyGround} ${maxBuiltRatio} ${densifyOld}  ${maximumDensity} ${winSize} ${minContig} ${maxContig} ${writingTifs} ${seed} ${sirene} ${transport} ${routes} ${ecologie} ${ocsol} "${optionsPrep}"""")set (
    inputDirectory := workDirectory / "prepared_34",
    inputs += (taux, scenario, pluPriority, buildNonRes, densifyGround, maxBuiltRatio, densifyOld, maximumDensity, winSize, minContig, maxContig, seed, sirene , transport, routes, ecologie, ocsol),
    inputs += optionsPrep,
    outputs += (taux, scenario, pluPriority, buildNonRes, densifyGround, maxBuiltRatio, densifyOld, maximumDensity, winSize, minContig, maxContig, seed, sirene , transport, routes, ecologie, ocsol),
    inputFiles += (inputDirectory, "/tmp/prepared_data"),
    outputFiles += ("/tmp/results", output),
    optionsPrep:="",
    //winSize := 3,
    //minContig := 1,
    //maxContig :=5,
    //scenario := 0.0,
    writingTifs := "False"
   
   
  )
  

val extract = ScalaTask("""
|    import scala.io.Source
|    val measures = output.listFiles().filter(_.isDirectory).flatMap(_.listFiles().filter(_.isDirectory)).flatMap(_.listFiles().filter(_.getName.equalsIgnoreCase("mesures.csv"))).head
|    val src = Source.fromFile(measures)
|    val lineArray = src.getLines().drop(7).next().split(",")
|    val impact = lineArray(1).trim.toDouble
    """.stripMargin) set (
    inputs += output,
    outputs += impact
    )
   
val copy = CopyFileHook(output, workDirectory / "results" / "sim_${taux}_${scenario}_${pluPriority}_${buildNonRes}_${densifyGround}_${maxBuiltRatio}_${densifyOld}_${maximumDensity}_${winSize}_${minContig}_${maxContig}_${seed}_${sirene}_${transport}_${routes}_${ecologie}_${ocsol}")

val stringHook = DisplayHook("The impact value is ${impact}.")

//val env = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 2500 megabytes)
val env = LocalEnvironment(4)


//val runModel = MoleTask( (pythonTask hook copy) ) // -- (extract hook stringHook)


val sampling =DirectSampling ( sampling= (
                        (taux in (0.1 to 1.6 by 0.1)) x
                        (scenario in  List(0.0, 1.0, 2.0) )x
                        (pluPriority  in  List(0.0, 1.0)  )x
                        (buildNonRes   in  List(0.0, 1.0)  )  x
                        (densifyGround  in  List(0.0, 1.0)  ) x
                        (maxBuiltRatio in  (50.0 to 100.0 by 5.0))  x
                        (densifyOld   in  List(0.0, 1.0)  ) x
                        (maximumDensity  in  List(0.0, 1.0)  ) x
                         (winSize in (3.0 to 9.0 by 1.0))x
                        (minContig in (0.0 to  0.3 by 0.1))x
                         (maxContig in (0.6 to  1.0 by 0.1))x
                        (seed in (UniformDistribution[Int](max=2147483646) take 100)) x
                        (sirene in List(0,1,2,3,4,5)) x
                        (transport in List(0,1,2,3,4,5)) x
                        (routes in List(0,1,2,3,4,5)) x
                        (ecologie in List(0,1,2,3,4,5)) x
                        (ocsol in List(0,1,2,3,4,5))
                        filter ("minContig<maxContig") take 5
                        //filter("if (winSize == 3)  ( minContig <= 8 | maxContig <= 8 ) else true " )
                        //filter(" if (winSize > 3) (minContig <= 1 | maxContig <= 1) else true ")
  )
  ,
 evaluation = ((pythonTask on env hook copy  ) -- (extract hook stringHook))
  )
 sampling 
